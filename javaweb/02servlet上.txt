1.web程序结构 
4.java web是和平台无关的服务器端组件，它运行在servlet容器中。servlet容器
  负责servlet和客户的通信以及调用servlet的方法。servlet和客户的通信采用
  请求/响应 的模式。servlet可完成如下功能
  --创建并返回基于客户请求的动态html页面
  --创建可嵌入到现有html页面中的部分html页面
  --与其它服务器资源进行通信
5.servlet生命周期方法
	<servlet>
	    <!-- Servlet 注册的名字 -->
	    <servlet-name>helloServlet</servlet-name>
	    <!-- Servlet 的全类名 -->
	    <servlet-class>com.pcitc.servlet.HelloServlet</servlet-class>
	    <!-- <load-on-startup>1</load-on-startup> -->
	</servlet>

	<servlet-mapping>
	   <!-- 需要和某一个 servlet 节点的 serlvet-name 子节点的文本节点一致 -->
	   <servlet-name>helloServlet</servlet-name>
	   <!-- 映射具体的访问路径: / 代表当前 WEB 应用的根目录. -->
	   <url-pattern>/*</url-pattern>
	</servlet-mapping>
  (1)servlet容器：
    --可以来创建servlet，并调用servlet相关生命周期方法
    --jsp，filter，listener，tag..
  (2)生命周期方法:一下方法由servlet容器负责调用
    --构造器：第一次请求servlet时，创建servlet实例，调用构造器
             说明servlet是单实例的，
    --init:只被调用一次，创建好实例后立即被调用，用于初始化当前servlet
    --service:被多次调用，每次请求都会调用service方法，实际用于响应请求的
    --destory:只被调用一次，在当前servlet所在的web应用被卸载前调用，用于
              释放当前servlet所占用的资源
  (3)load-on-startup:可以指定servlet被创建的时机
  (4)servlet容器响应客户请求的过程
     ①servlet引擎检查是否已经装载并创建了该servlet实例对象，如果是则执行④
     否则执行②
     ②装载并创建该servlet的一个实例对象：调用该servlet的构造器
     ③调用servlet实例对象的init方法
     ④创建一个用于封装强求的servletRequest对象和一个代表响应消息的
       servletRepository对象，然后调用servlet的service() 方法并将请求和
       响应对象作为参数传递进去
     ⑤web应用程序被停止或重启之前，servlet引擎将卸载servlet，并在卸载之前调用
       servlet的destroy()方法 
  (5)同一个servlet可以被映射到多个url上，即一个servlet可以有多个
      servlet-mapping
      servlet映射到可以使用*通配符（**带扩展名的不能带斜杠**）
      /*.action不合法
6.interface servletConfig对象
   (1)由tomcat实现
7.servletContext
   servlet引擎为每个web应用程序都创建了一个对应的servletContex对象。
   servletContext对象被包含在servletConfig对象中，调用servletConfig.getServletContxt()
   方法可以返回servletContex引用
   由于一个web应用程序中所有servlet都共享一个servletContex对象，所以servletContex
   对象被称之为application对象(web应用程序对象)
   功能
   --获取web应用程序初始化参数<context-param></context-param>
   --记录日志
   --application域范围的属性
   --访问资源文件
   --获取虚拟路径所映射的本地路径
   --web应用程序之间的访问
   --servletContext的其它方法