https://blog.csdn.net/s10461/article/details/53941091
1.泛型，即参数化类型
2.ist arrayList = new ArrayList();
  arrayList.add("aaaa");
  arrayList.add(100);
  for(int i = 0; i< arrayList.size();i++){
       String item = (String)arrayList.get(i);
       Log.d("泛型测试","item = " + item);
    }
3. 特性
   泛型只在编译阶段有效。
   List<String> stringArrayList = new ArrayList<String>();
   List<Integer> integerArrayList = new ArrayList<Integer>()
   Class classStringArrayList = stringArrayList.getClass();
   Class classIntegerArrayList = integerArrayList.getClass();
   if(classStringArrayList.equals(classIntegerArrayList)){
      Log.d("泛型测试","类型相同");
    }

   输出结果：D/泛型测试: 类型相同。
   通过上面的例子可以证明，在编译之后程序会采取去泛型化的措施。也就是说Java中的泛型，只在编译阶段有效。
   在编译过程中，正确检验泛型结果后，会将泛型的相关信息擦出，并且在对象进入和离开方法的边界处添加类型检查和类型转换的方法。
   也就是说，泛型信息不会进入到运行时阶段。
 4. 泛型有三种使用方式，分别为：泛型类、泛型接口、泛型方法
 ***pecs***

