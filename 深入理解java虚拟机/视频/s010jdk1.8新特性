1.Lambda 表达式和函数式编程
2.利弊
  函数式编程是技术的发展方向，而Lambda是函数式编程最基础的内容，
  所以，Java 8中加入Lambda表达式本身是符合技术发展方向的。通过引入
  Lambda，最直观的一个改进是，不用再写大量的匿名内部类。事实上，
  还有更多由于函数式编程本身特性带来的提升。比如：代码的可读性会更好、
  高阶函数引入了函数组合的概念。此外，因为Lambda的引入，
  集合操作也得到了极大的改善。比如，引入stream API，把map、reduce、filter
  这样的基本函数式编程的概念与Java集合结合起来。
  在大多数情况下，处理集合时，Java程序员可以告别for、while、if这些语句。
  随之而来的是，map、reduce、filter等操作都可以并行化，
  在一些条件下，可以提升性能。
  不过，对大多数Java程序员来说，
  他们最熟悉的内容是面向对象，函数式编程是个陌生的概念，
  是一种“全新”的思维模式。对于喜欢墨守陈规的大多数而言，
  这无疑会增加Java的入门成本，以及向新版本迁移的成本。
  还有一件事，Lambda本身是借助invokedynamic实现的，这是这个Java 7加
  入的新指令第一次在Java语言层面上得到应用。因为它的存在，我们在某
  种程度上可以绕过Java的类型系统，很难说这是好是坏。